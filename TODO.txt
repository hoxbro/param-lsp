TODO: Replace ast.parse with parso library
==========================================

PHASE 1: Core Parsing Infrastructure
------------------------------------
[x] Replace main parsing logic in analyzer.py:52-104
    - Replace ast.parse(content) with parso.parse(content)
    - Leverage parso's built-in error recovery (error_recovery=True)
    - Remove custom syntax fixing logic (_try_fix_incomplete_syntax)
    - Remove line-by-line parsing fallback logic
    - Replace AST walking with parso node traversal

[x] Update import handling
    - Replace isinstance(node, ast.Import) with parso equivalents
    - Replace isinstance(node, ast.ImportFrom) with parso equivalents
    - Update for parso node types: import_name and import_from

[x] Update class definition detection
    - Replace isinstance(node, ast.ClassDef) with parso's classdef node type
    - Update base class resolution logic for parso node structure

MAJOR MILESTONE ACHIEVED
========================
✅ Core functionality working: Imports {'param': 'param'} and Classes {'Test': ParameterizedInfo}
✅ Parso error recovery eliminates need for custom syntax fixing
✅ Better handling of incomplete syntax compared to ast.parse

PHASE 2: AST Node Type Replacements
-----------------------------------
[x] Update core class and import handling methods
    - _walk_tree (formerly _walk_parso_tree)
    - _get_class_name (formerly _get_class_name_parso)
    - _get_class_bases (formerly _get_class_bases_parso)
    - _collect_inherited_parameters updated for parso nodes
    - _handle_class_def updated for parso nodes

[x] Remove _parso suffixes from method names
    - Clean method naming convention established
    - Remove duplicate AST-based methods
    - Eliminate conflicts between AST and parso versions

[x] Update import and class detection for parso
    - _handle_import works with parso import_name nodes
    - _handle_import_from works with parso import_from nodes
    - _is_param_base works with atom_expr and power nodes

[x] Complete parameter extraction implementation
    - ✅ _extract_parameters for parso nodes working
    - ✅ Parameter argument parsing (bounds, doc, default) implemented
    - ✅ All major AST method conflicts resolved
    - ✅ _resolve_parameter_class returns proper dict format
    - ✅ _get_keyword_arguments handles both arglist and direct arguments

[x] Replace core AST node type checks throughout analyzer.py
    - ✅ _check_constructor_parameter_types converted to parso
    - ✅ _check_parameter_default_type converted to parso
    - ✅ _check_parameter_constraints converted to parso
    - ✅ _get_instance_class converted to parso
    - ✅ All "keywords attribute" errors eliminated
    - ⚠️  Some methods still use AST types but added ast import for compatibility

MAJOR MILESTONE ACHIEVED
========================
✅ Parameter extraction working: All param types detected (Integer, Number, String, Boolean, etc.)
✅ Bounds validation working: Invalid bounds detected, proper error reporting
✅ Error creation working: parso node positions used for LSP diagnostics
✅ Test progress: 4/9 bounds validation tests passing (was 0/9)

PHASE 3: Value Extraction Logic
-------------------------------
[x] Basic value formatting implemented
    - _format_default_value uses parso's .get_code() method
    - _is_none_value checks parso name nodes for 'None'

[x] Complete parameter argument extraction
    - ✅ _extract_bounds_from_call fully implemented for parso nodes
    - ✅ _extract_doc_from_call fully implemented for parso nodes
    - ✅ _extract_allow_None_from_call fully implemented for parso nodes
    - ✅ _extract_default_from_call fully implemented for parso nodes
    - ✅ _extract_single_argument helper added for consistent parsing

[x] Update remaining value extraction methods
    - ✅ _extract_numeric_value() for parso number nodes
    - ✅ _extract_string_value() for parso string nodes
    - ✅ _extract_boolean_value() for parso name nodes (True/False)
    - ✅ _infer_value_type() for parso node structure

REMAINING EDGE CASES TO FIX
---------------------------
[ ] Negative number handling in bounds
    - Need to handle unary minus operators in numeric extraction
    - Test case: bounds=(-5, 0) currently not working

[ ] Inclusive bounds tuple parsing refinement
    - inclusive_bounds=(False, True) parsing needs improvement
    - Complex tuple structures in constraint checking

[ ] Default value bounds violation detection edge cases
    - Some scenarios not detecting all violations (expecting 4, getting 2)
    - Need to improve default value constraint checking

[ ] Empty default value warnings for List/Tuple parameters
    - default=[] with bounds specified should generate warnings
    - Empty container detection logic needs refinement

PHASE 4: Error Handling & Diagnostics
-------------------------------------
[x] Replace custom syntax error handling with parso
    - Removed complex _try_fix_incomplete_syntax() logic
    - Removed line-by-line parsing fallback
    - Use parso's error_recovery=True for robust parsing
    - Implemented parso error logging with grammar.iter_errors()

[x] Simplified error handling
    - Clean analyze_file() method with single try/catch
    - Better handling of incomplete syntax during typing
    - Parso continues processing even with syntax errors

[x] Update remaining error creation methods
    - ✅ _create_type_error() updated for parso node positions
    - ✅ LSP diagnostic compatibility maintained
    - ✅ Error reporting working with start_pos/end_pos from parso nodes

PHASE 5: Testing & Validation
-----------------------------
[ ] Run existing tests and fix any failures
    - Execute pytest tests/ to identify breaking changes
    - Fix any test failures related to AST→parso conversion

[ ] Test error handling improvements
    - Test with malformed/incomplete Python code
    - Verify error recovery works better than current implementation
    - Test that LSP diagnostics still work correctly

[ ] Test all LSP features still work
    - Test autocompletion functionality
    - Test hover information
    - Test type checking and diagnostics
    - Verify external library introspection still works

[ ] Performance testing
    - Benchmark parsing performance vs current ast.parse
    - Test with large param codebases
    - Verify memory usage is acceptable

PHASE 6: Cleanup & Optimization
-------------------------------
[ ] Clean up imports
    - Remove 'import ast' from analyzer.py
    - Add 'import parso'
    - Update any other files that import ast if needed

[ ] Consider regex reduction opportunities
    - Analyze completion.py regex patterns for parso replacement
    - Evaluate @param.depends decorator parsing improvements
    - Consider constructor call detection improvements

[ ] Documentation updates
    - Update any comments referencing AST parsing
    - Update docstrings that mention ast.parse behavior
    - Document the improved error handling capabilities

PHASE 7: Final Integration
-------------------------
[ ] Run full test suite
    - Execute pytest tests/ for complete validation
    - Run prek run --all-files for linting
    - Fix any remaining issues

[ ] Test with real-world codebases
    - Test against Panel applications
    - Test against HoloViews code
    - Test against param examples

[ ] Performance validation
    - Ensure no significant performance regression
    - Verify error handling improvements work in practice
    - Validate that parso caching provides benefits

COMPLETED TASKS
===============
[x] Analyze current ast.parse usage in codebase
[x] Research parso API and capabilities
[x] Create comprehensive replacement plan
[x] Identify all AST node types used in analyzer.py
[x] Create detailed TODO.txt file
[x] Replace ast.parse with parso.parse + error recovery
[x] Core parsing infrastructure converted (imports, classes working)
[x] Remove _parso method suffixes and duplicate AST methods
[x] Establish systematic conversion pattern for remaining work
[x] Prove parso error recovery works better than AST fallback logic
[x] Complete Phase 2: AST Node Type Replacements
    - ✅ All core parameter extraction methods converted to parso
    - ✅ Keyword argument parsing from function calls working
    - ✅ Bounds extraction and validation working
    - ✅ Error reporting with parso node positions working
    - ✅ Parameter type detection working for all param types
[x] Complete Phase 3: Value Extraction Logic
    - ✅ All value extraction methods implemented for parso nodes
    - ✅ Numeric, string, boolean value parsing working
    - ✅ Type inference from parso nodes working
[x] Partial Phase 4: Error Handling & Diagnostics
    - ✅ Error creation and positioning working with parso nodes
    - ✅ LSP diagnostic compatibility maintained

CURRENT STATUS: Major parso conversion complete, 4/9 bounds tests passing ✅

NEXT PRIORITIES
===============
1. Fix remaining bounds validation edge cases (negative numbers, inclusive bounds)
2. Improve default value violation detection completeness
3. Add empty default container warnings for List/Tuple parameters
4. Complete remaining AST method conversions (non-critical paths)
5. Full test suite validation
