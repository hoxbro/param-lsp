======================================================================
Tree-sitter Performance Benchmark Suite
======================================================================

Loading test files from codebase...
Loaded 10 Python files for testing
Total lines of code: 1476

======================================================================
BENCHMARK 1: Parse Tree Caching
======================================================================

Parsed 10 files:
  Cold cache (first parse):  3.68ms
  Warm cache (cached parse): 0.04ms
  Speedup: 97.48x faster with cache
  Cache stats: {'size': 10, 'capacity': 100, 'enabled': True}

======================================================================
BENCHMARK 2: Query-based vs Manual Tree Walking
======================================================================

Finding class definitions in 10 files:
  Manual tree walk: 5.10ms (9 classes)
  Query-based:      2.78ms (9 classes)
  Speedup: 1.84x faster with queries

Finding import statements in 10 files:
  Manual tree walk: 6.73ms (44 imports)
  Query-based:      2.74ms (44 imports)
  Speedup: 2.45x faster with queries

Finding function calls in 10 files:
  Manual tree walk: 5.70ms (264 calls)
  Query-based:      2.55ms (264 calls)
  Speedup: 2.23x faster with queries

======================================================================
BENCHMARK 3: Memory Usage
======================================================================

Memory usage for 10 files:
  Without cache: 0.47 MB (peak)
  With cache:    1.23 MB (peak)
  Cache overhead: 0.76 MB
  Cached trees: 10 / 100

======================================================================
SUMMARY
======================================================================

ðŸ“Š Performance Improvements:
  â€¢ Cache speedup:       97.48x faster
  â€¢ Query avg speedup:   2.17x faster
    - Classes:           1.84x
    - Imports:           2.45x
    - Function calls:    2.23x

ðŸ’¾ Memory Usage:
  â€¢ Peak without cache:  0.47 MB
  â€¢ Peak with cache:     1.23 MB
  â€¢ Cache overhead:      0.76 MB

âœ¨ Combined optimization: ~212.0x faster (cache + queries)

âœ… SIGNIFICANT IMPROVEMENT - Ready to commit!
